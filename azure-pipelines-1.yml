trigger:
- main
- master
- develop
- feature/*

pool:
  vmImage: ubuntu-latest

variables:
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  artifaceName: drop
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs:
  - job: 'BuildClient'
    displayName: 'Build job'
    pool:
      vmImage: ubuntu-latest

    steps:
    # UI Layer
    - task: Npm@1
      displayName: 'Restore Angular Dependencies'
      inputs:
        command: install
        workingDir: 'ClientApp'
        verbose: false

    - task: Npm@1
      displayName: 'Build Angular'
      inputs:
        command: custom
        workingDir: 'ClientApp'
        verbose: false
        customCommand: 'run build --prod'

    - task: Npm@1
      displayName: 'Test UI'
      inputs:
        command: custom
        workingDir: 'ClientApp'
        verbose: false
        customCommand: 'run test --watch=false'

    # Middle Layer
    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'


    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: $(artifaceName)

- stage: 'DeployDev'
  displayName: 'Deploy to Dev'
  # condition: and(succeeded(), eq(variables.isMain, 'true'))
  variables: 
    appName: 'Sarfraz1'
  jobs:
  - deployment: 'Dev'
     
    environment: 'Dev'
    strategy: 
       runOnce:     
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Azure subscription 1(3e8107cc-8a31-49d5-b085-eb20a378387f)'
              appType: 'webAppLinux'
              WebAppName: $(appName)
              packageForLinux: '$(Pipeline.Workspace)/$(artifaceName)/$(buildConfiguration)/*.zip'

- stage: 'DeployProd'
  displayName: 'Deploy to Prod'
  # condition: and(succeeded(), eq(variables.isMain, 'true'))
  variables: 
    appName: 'Sarfrazprod'
  jobs:
  - deployment: 'Prod'
     
    environment: 'Prod'
    strategy: 
       runOnce:     
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Azure subscription 1(3e8107cc-8a31-49d5-b085-eb20a378387f)'
              appType: 'webAppLinux'
              WebAppName: $(appName)
              packageForLinux: '$(Pipeline.Workspace)/$(artifaceName)/$(buildConfiguration)/*.zip'